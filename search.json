[{"path":"https://dreamrs.github.io/datamods/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://dreamrs.github.io/datamods/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://dreamrs.github.io/datamods/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://dreamrs.github.io/datamods/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://dreamrs.github.io/datamods/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://dreamrs.github.io/datamods/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://dreamrs.github.io/datamods/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://dreamrs.github.io/datamods/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://dreamrs.github.io/datamods/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://dreamrs.github.io/datamods/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://dreamrs.github.io/datamods/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://dreamrs.github.io/datamods/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://dreamrs.github.io/datamods/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://dreamrs.github.io/datamods/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://dreamrs.github.io/datamods/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://dreamrs.github.io/datamods/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://dreamrs.github.io/datamods/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://dreamrs.github.io/datamods/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://dreamrs.github.io/datamods/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://dreamrs.github.io/datamods/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://dreamrs.github.io/datamods/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"datamods: Modules to Import and Manipulate Data in 'Shiny' Applications Copyright (C) 2020 Victor PERRIER  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. datamods Copyright (C) 2020 Victor PERRIER This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":[]},{"path":"https://dreamrs.github.io/datamods/articles/datamods.html","id":"from-environment","dir":"Articles","previous_headings":"Import","what":"From environment","title":"Getting started with datamods","text":"Imports data user’s global environment package environment retrieve included . searches data sets global environment lets user choose data use.","code":"# UI import_globalenv_ui(\"myid\")  # Server imported <- import_globalenv_server(\"myid\")"},{"path":"https://dreamrs.github.io/datamods/articles/datamods.html","id":"from-file","dir":"Articles","previous_headings":"Import","what":"From file","title":"Getting started with datamods","text":"Imports data external file. file can format, csv, xlsx, tsv etc.. Import performed package rio. case Excel files, gives option choose sheet.","code":"# UI import_file_ui(\"myid\")  # Server imported <- import_file_server(\"myid\")"},{"path":"https://dreamrs.github.io/datamods/articles/datamods.html","id":"from-clipboard","dir":"Articles","previous_headings":"Import","what":"From clipboard","title":"Getting started with datamods","text":"Imports data via copy/paste. Simply copy paste data source.","code":"# UI import_copypaste_ui(\"myid\")  # Server imported <- import_copypaste_server(\"myid\")"},{"path":"https://dreamrs.github.io/datamods/articles/datamods.html","id":"from-googlesheet","dir":"Articles","previous_headings":"Import","what":"From Googlesheet","title":"Getting started with datamods","text":"Imports data Googlesheet. Use shareable link read data.","code":"# UI import_googlesheets_ui(\"myid\")  # Server imported <- import_googlesheets_server(\"myid\")"},{"path":"https://dreamrs.github.io/datamods/articles/datamods.html","id":"from-url","dir":"Articles","previous_headings":"Import","what":"From URL","title":"Getting started with datamods","text":"Imports data URL. flat data format supported package rio.","code":"# UI import_url_ui(\"myid\")  # Server imported <- import_url_server(\"myid\")"},{"path":"https://dreamrs.github.io/datamods/articles/datamods.html","id":"usage","dir":"Articles","previous_headings":"Import","what":"Usage","title":"Getting started with datamods","text":"modules used way Shiny application, example: modules return value server-side, list three slots: status: reactive function returning status: NULL, error success. name: reactive function returning name imported data character. data: reactive function returning imported data.frame.","code":"library(shiny) library(datamods)  ui <- fluidPage(   tags$h3(\"Import data with copy & paste\"),   fluidRow(     column(       width = 4,       import_copypaste_ui(\"myid\")     ),     column(       width = 8,       tags$b(\"Imported data:\"),       verbatimTextOutput(outputId = \"status\"),       verbatimTextOutput(outputId = \"data\")     )   ) )  server <- function(input, output, session) {    imported <- import_copypaste_server(\"myid\")    output$status <- renderPrint({     imported$status()   })   output$data <- renderPrint({     imported$data()   })  }  shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/datamods/articles/datamods.html","id":"modal-window","dir":"Articles","previous_headings":"Import","what":"Modal Window","title":"Getting started with datamods","text":"modules can launched modal window:  Launch modal server-side : See ?import_modal complete example.","code":"observeEvent(input$launch_modal, {   import_modal(     id = \"myid\",     title = \"Import data to be used in application\"   ) })"},{"path":"https://dreamrs.github.io/datamods/articles/datamods.html","id":"update-modules","dir":"Articles","previous_headings":"","what":"Update Modules","title":"Getting started with datamods","text":"module allow dynamically select, rename convert variables dataset.  options converting date numeric available dropdown menu. Return value module reactive function update data.","code":""},{"path":"https://dreamrs.github.io/datamods/articles/datamods.html","id":"validate","dir":"Articles","previous_headings":"","what":"Validate","title":"Getting started with datamods","text":"importing data application can useful check data respect expectations: number rows/columns, existence variable, … module allow validate rules defined package validate.  Validation results can displayed dropdown menu (left) inline module called. return value server-side list following items: status: reactive function returning best status available “OK”, “Failed” “Error”. details: reactive function returning list validation details.","code":"# UI validation_ui(\"validation\", display = \"inline\")  # Server results <- validation_server(   id = \"validation\",   data = dataset,   n_row = ~ . > 20, # more than 20 rows   n_col = ~ . >= 3, # at least 3 columns   rules = myrules )  # Rules are defined as follow: myrules <- validator(   is.character(Manufacturer) | is.factor(Manufacturer),   is.numeric(Price),   Price > 12, # we should use 0 for testing positivity, but that's for the example   !is.na(Luggage.room),   in_range(Cylinders, min = 4, max = 8),   Man.trans.avail %in% c(\"Yes\", \"No\") ) # Add some labels label(myrules) <- c(   \"Variable Manufacturer must be character\",   \"Variable Price must be numeric\",   \"Variable Price must be strictly positive\",   \"Luggage.room must not contain any missing values\",   \"Cylinders must be between 4 and 8\",   \"Man.trans.avail must be 'Yes' or 'No'\" ) # you can also add a description()"},{"path":"https://dreamrs.github.io/datamods/articles/datamods.html","id":"filter","dir":"Articles","previous_headings":"","what":"Filter","title":"Getting started with datamods","text":"Interactively filter data.frame generate code reproduce filters applied: can select variables create filter choose widgets used create UI filter.  return value server-side list following items: filtered: reactive function returning data filtered. code: reactive function returning dplyr pipeline filter data. expr: reactive function returning expression filter data.","code":"# UI filter_data_ui(\"filtering\", max_height = \"500px\")  # Server res_filter <- filter_data_server(   id = \"filtering\",   data = reactive(mtcars),   name = reactive(\"mtcars\"),   vars = reactive(names(mtcars)),   widget_num = \"slider\",   widget_date = \"slider\",   label_na = \"Missing\" )"},{"path":"https://dreamrs.github.io/datamods/articles/datamods.html","id":"sample","dir":"Articles","previous_headings":"","what":"Sample","title":"Getting started with datamods","text":"Interactively sample data.frame keep part data, depending number proportion rows keep.","code":"# UI sample_ui(\"myID\")  # Server result_sample <- sample_server(\"myID\", reactive(iris))"},{"path":"https://dreamrs.github.io/datamods/articles/datamods.html","id":"edit","dir":"Articles","previous_headings":"","what":"Edit","title":"Getting started with datamods","text":"Interactively edit data.frame, module also allow : adding, deleting modifying rows choosing editable columns choosing mandatory columns exporting data (csv Excel)  module returns edited table user modifications. See ?demo_edit see data created data edit example.","code":"# UI edit_data_ui(id = \"id\")  # Server   res_edited <- edit_data_server(     id = \"id\",     data_r = reactive(demo_edit),     add = TRUE,     update = TRUE,     delete = TRUE,     download_csv = TRUE,     download_excel = TRUE,     file_name_export = \"datas\",     var_edit = c(\"name\", \"job\", \"credit_card_provider\", \"credit_card_security_code\"),     var_mandatory = c(\"name\", \"job\")   )"},{"path":"https://dreamrs.github.io/datamods/articles/i18n.html","id":"integrated-languages","dir":"Articles","previous_headings":"","what":"Integrated languages","title":"Internationalization","text":"following languages integrated {datamods} : english, default. french, activate : macedonian, activate : brazilian portuguese, activate : albanian, activate : chinese, activate : spanish, activate : german, activate : turkish, activate : korean, activate : polish, activate : japanese, activate : want another language supported, can submit Pull Request add CSV file like one used french (file located inst/i18n folder package, can see GitHub).","code":"set_i18n(\"fr\") set_i18n(\"mk\") set_i18n(\"pt\") set_i18n(\"al\") set_i18n(\"cn\") set_i18n(\"es\") set_i18n(\"de\") set_i18n(\"tr\") set_i18n(\"kr\") set_i18n(\"pl\") set_i18n(\"ja\")"},{"path":"https://dreamrs.github.io/datamods/articles/i18n.html","id":"using-a-list","dir":"Articles","previous_headings":"","what":"Using a list","title":"Internationalization","text":"can change labels named list, names correspond labels values translation use:","code":"options(\"datamods.i18n\" = list(   \"Import a dataset from an environment\" = \"Importer un jeu de données depuis l'environnement global\",   \"Select a data.frame:\" = \"Sélectionner un data.frame :\",   ... ))"},{"path":"https://dreamrs.github.io/datamods/articles/i18n.html","id":"using-a-data-frame","dir":"Articles","previous_headings":"","what":"Using a data.frame","title":"Internationalization","text":"can change labels data.frame two columns label (original label) translation (new label display):","code":"set_i18n(data.frame(   label = c(\"Import a dataset from an environment\", \"Select a data.frame:\", ...),   translation = c(\"Importer un jeu de données depuis l'environnement global\", \"Sélectionner un data.frame :\", ...) ))"},{"path":"https://dreamrs.github.io/datamods/articles/i18n.html","id":"using-a-file","dir":"Articles","previous_headings":"","what":"Using a file","title":"Internationalization","text":"Use CSV file structure data.frame : example file shown .","code":"set_i18n(\"path/to/file.csv\")"},{"path":"https://dreamrs.github.io/datamods/articles/i18n.html","id":"all-labels","dir":"Articles","previous_headings":"","what":"All labels","title":"Internationalization","text":"’s file used french translation labels used package:","code":"\"label\",\"translation\",\"comment\" \"% of the total\",\"% du total\",\"Automatically translated\" \"% of the total, i.e.\",\"% du total, soit\",\"Automatically translated\" \"A shareable link, in that case first sheet will be read\",\"Un lien partageable, dans ce cas la première feuille sera lue\",\"\" \"Add a label to data\",\"Ajouter un libellé aux données\",\"\" \"Add a row\",\"Ajouter\",\"\" \"Apply changes\",\"Appliquer les changements\",\"\" \"Browse...\",\"Parcourir...\",\"\" \"Cancel\",\"Annuler\",\"\" \"Choose a name for the column to be created or modified,\",\"Choisissez un nom pour la colonne à créer ou à modifier,\",\"Automatically translated\" \"Choose a number of rows :\",\"Choisissez un nombre de lignes :\",\"Automatically translated\" \"Choose a percentage :\",\"Choisissez un pourcentage :\",\"Automatically translated\" \"Click on a column name to add it to the expression:\",\"Cliquez sur un nom de colonne pour l'ajouter à l'expression :\",\"Automatically translated\" \"Click to delete\",\"Cliquez pour supprimer\",\"\" \"Click to edit\",\"Cliquez pour modifier\",\"\" \"Close\",\"Fermer\",\"\" \"Close intervals on the right\",\"Intervalles rapprochés à droite\",\"Automatically translated\" \"Column added!\",\"Colonne ajoutée !\",\"Automatically translated\" \"Convert Numeric to Factor\",\"Convertir un numérique en facteur\",\"Automatically translated\" \"Copy & paste data\",\"Copier / coller des données\",\"\" \"Copy / Paste\",\"Copier / Coller\",\"\" \"Count\",\"Compter\",\"Automatically translated\" \"Create a new column\",\"Créer une nouvelle colonne\",\"Automatically translated\" \"Create a new variable otherwise replaces the one selected\",\"Créer une nouvelle variable sinon remplace celle sélectionnée\",\"Automatically translated\" \"Create column\",\"Créer une colonne\",\"Automatically translated\" \"Create factor variable\",\"Créer une variable de facteur\",\"Automatically translated\" \"Data has %s observations and %s variables.\",\"Les données ont %s observations et %s variables.\",\"\" \"Data ready to be imported!\",\"Données prêtes à être importées\",\"\" \"Data successfully imported!\",\"Données importées avec succès\",\"\" \"Data successfully updated!\",\"Données mises à jour avec succès !\",\"\" \"Data wasn't deleted\",\"Les données n'ont pas été supprimées\",\"Automatically translated\" \"Data wasn't updated\",\"Les données n'ont pas été mises à jour\",\"Automatically translated\" \"Dataset validation:\",\"Validation de l'ensemble de données :\",\"Automatically translated\" \"Date format:\",\"Format des dates :\",\"\" \"Date to use as origin to convert date/datetime:\",\"Date à utiliser comme origine pour convertir des dates au format numérique :\",\"\" \"Decimal separator:\",\"Séparateur de décimal :\",\"\" \"Delete\",\"Effacer\",\"\" \"Do you want to delete the selected row ?\",\"Voulez-vous supprimer la ligne sélectionnée ?\",\"\" \"Encoding:\",\"Encodage :\",\"\" \"Enter URL to data:\",\"Entrez l'URL des données :\",\"Automatically translated\" \"Enter a shareable link to a GoogleSheet:\",\"Entrez un lien partageable vers une GoogleSheet :\",\"\" \"Enter an expression to define new column:\",\"Entrez une expression pour définir une nouvelle colonne :\",\"Automatically translated\" \"Environment\",\"Environnement\",\"\" \"Error\",\"Erreur\",\"\" \"External file\",\"Fichier\",\"\" \"Factor variable to reorder:\",\"Variable de facteur à réorganiser :\",\"Automatically translated\" \"Failed\",\"Echec\",\"\" \"First five rows are shown below:\",\"Les cinq premières lignes sont affichées ci-dessous :\",\"\" \"Googlesheets\",\"Googlesheets\",\"\" \"Group calculation by:\",\"Calcul de groupe par :\",\"Automatically translated\" \"Help\",\"Aide\",\"\" \"How to import data?\",\"Comment importer des données ?\",\"\" \"Import\",\"Import\",\"\" \"Import Google Spreadsheet\",\"Importer une GoogleSheet\",\"\" \"Import Url\",\"URL d'importation\",\"Automatically translated\" \"Import a dataset from an environment\",\"Importer un jeu de données depuis l'environnement global\",\"\" \"Import a file\",\"Import d'un fichier\",\"\" \"Import data\",\"Importer les données\",\"\" \"Imported data\",\"Données importées\",\"Automatically translated\" \"Include lowest value\",\"Inclure la valeur la plus basse\",\"Automatically translated\" \"Information\",\"Informations\",\"\" \"Item has been modified\",\"L'élément a été modifié\",\"\" \"Levels\",\"Les niveaux\",\"Automatically translated\" \"List of data.frame...\",\"Liste des tableau de données\",\"\" \"Max:\",\"Maximale :\",\"Automatically translated\" \"Mean:\",\"Signifier:\",\"Automatically translated\" \"Method:\",\"Méthode:\",\"Automatically translated\" \"Min:\",\"Min :\",\"Automatically translated\" \"Missing values characters:\",\"Caractères de valeurs manquants :\",\"Automatically translated\" \"Missing:\",\"Manquant:\",\"Automatically translated\" \"Most Common:\",\"Le plus commun:\",\"Automatically translated\" \"New column name cannot be empty\",\"Le nom de la nouvelle colonne ne peut pas être vide\",\"Automatically translated\" \"New column name:\",\"Nouveau nom de colonne :\",\"Automatically translated\" \"No\",\"Non\",\"\" \"No data selected!\",\"Pas de données sélectionnées\",\"\" \"No data to display.\",\"Pas de données à afficher.\",\"\" \"No data.frame here...\",\"Pas de données ici...\",\"\" \"No file selected\",\"Pas de fichier sélectionné\",\"\" \"No file selected:\",\"Aucun fichier sélectionné\",\"\" \"Not a data.frame\",\"Pas un data.frame\",\"Automatically translated\" \"Nothing pasted yet!\",\"Rien n'a encore été collé !\",\"\" \"Number of breaks:\",\"Nombre de pauses :\",\"Automatically translated\" \"Number of rows:\",\"Nombre de lignes :\",\"\" \"OK\",\"OK\",\"\" \"Ooops\",\"Ooops\",\"\" \"Paste data here:\",\"Collez vos données ici :\",\"\" \"Please copy and paste some data in the dialog box above.\",\"Veuillez copier et coller certaines données dans la boîte de dialogue ci-dessus.\",\"\" \"Please fill in the required fields\",\"Merci de remplir les champs obligatoires\",\"\" \"Please paste a valid GoogleSheet link in the dialog box above.\",\"Veuillez coller un lien GoogleSheet valide dans la boîte de dialogue ci-dessus.\",\"\" \"Please paste a valid link in the dialog box above.\",\"Veuillez coller un lien valide dans la boîte de dialogue ci-dessus.\",\"Automatically translated\" \"Registered\",\"Enregistré\",\"\" \"Required field\",\"Champs requis\",\"\" \"Row has been saved\",\"La ligne a été enregistrée\",\"\" \"Row was not deleted\",\"La ligne n'a pas été supprimée\",\"\" \"Rows to skip before reading data:\",\"Lignes à ignorer avant de lire les données :\",\"Automatically translated\" \"Sample data by :\",\"Echantillonner les données selon :\",\"\" \"Save\",\"Enregistrer\",\"\" \"Select\",\"Sélectionner\",\"\" \"Select a data.frame:\",\"Sélectionner un data.frame :\",\"\" \"Select an environment in which to search:\",\"Sélectionner un environnement dans lequel rechercher :\",\"\" \"Select environment\",\"Sélectionner un environnement\",\"\" \"Select sheet to import:\",\"Sélectionner la feuille à importer :\",\"\" \"Some operations are not allowed\",\"Certaines opérations ne sont pas autorisées\",\"Automatically translated\" \"Something went wrong...\",\"Un problème est survenu...\",\"\" \"Sort count\",\"Nombre de tris\",\"Automatically translated\" \"The URL that appear in your browser, in that case the current sheet will be read\",\"L'URL qui apparaît dans votre navigateur, dans ce cas la feuille active sera lue\",\"\" \"The row has been deleted\",\"La ligne a été supprimée\",\"\" \"The row wasn't added to the data\",\"La ligne n'a pas été ajoutée aux données\",\"Automatically translated\" \"URL\",\"URL\",\"\" \"Unable to add the row, contact the platform administrator\",\"Impossible d'ajouter la ligne, contactez l'administrateur de la plateforme\",\"\" \"Unable to delete the row, contact platform administrator\",\"Impossible de supprimer la ligne, contactez l'administrateur de la plateforme\",\"\" \"Unable to modify the item, contact the platform administrator\",\"Impossible de modifier l'élément, contactez l'administrateur de la plateforme\",\"\" \"Unique values:\",\"Valeurs uniques :\",\"Automatically translated\" \"Unique:\",\"Unique:\",\"Automatically translated\" \"Update\",\"Modifier\",\"\" \"Update & select variables\",\"Modifier et sélectionner des variables\",\"\" \"Update factor variable\",\"Variable de facteur de mise à jour\",\"Automatically translated\" \"Update levels of a factor\",\"Mettre à jour les niveaux d'un facteur\",\"Automatically translated\" \"Update row\",\"Mettre à jour la ligne\",\"\" \"Upload a file:\",\"Charger un fichier :\",\"\" \"Use a data.frame from your environment or from the environment of a package.\",\"Utiliser un tableau de données de votre environnement ou de celui d'un paquet.\",\"\" \"Valid number of columns\",\"Nombre de colonnes valide\",\"Automatically translated\" \"Valid number of rows\",\"Nombre de lignes valide\",\"Automatically translated\" \"Validate\",\"Validation\",\"\" \"Validation:\",\"Validation :\",\"\" \"Variable to cut:\",\"Variable à couper :\",\"Automatically translated\" \"View\",\"Affichage\",\"\" \"Warning\",\"Avertissement\",\"Automatically translated\" \"Yes\",\"Oui\",\"\" \"You can either use:\",\"Vous pouvez utiliser au choix :\",\"\" \"You can import %s files\",\"Vous pouvez importer des fichers %s\",\"\" \"You can import from flat table format supported by\",\"Vous pouvez importer à partir du format de tableau plat pris en charge par\",\"Automatically translated\" \"click to see data\",\"cliquez pour afficher les données\",\"\" \"data has %s obs. of %s variables.\",\"les données ont %s observations et %s colonnes.\",\"\" \"if several use a comma ',' to separate them\",\"si plusieurs utilisent une virgule ',' pour les séparer\",\"Automatically translated\" \"lines, i.e.\",\"lignes, c'est-à-dire\",\"Automatically translated\" \"number of rows\",\"Nombre de lignes\",\"\" \"proportion of rows\",\"Proportion de lignes\",\"\" \"rows\",\"lignes\",\"Automatically translated\" \"then enter an expression before clicking on the button above to validate or on \",\"puis saisissez une expression avant de cliquer sur le bouton ci-dessus pour valider ou sur\",\"Automatically translated\" \"to delete it.\",\"pour le supprimer.\",\"Automatically translated\" \"Sort by count\",\"Trier par nombre\",\"Automatically translated\" \"Sort by levels\",\"Trier par niveaux\",\"Automatically translated\""},{"path":"https://dreamrs.github.io/datamods/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Victor Perrier. Author, maintainer, copyright holder. Fanny Meyer. Author. Samra Goumri. Author. Zauad Shahreer Abeer. Author. Eduard Szöcs. Contributor.","code":""},{"path":"https://dreamrs.github.io/datamods/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Perrier V, Meyer F, Goumri S, Abeer Z (2024). datamods: Modules Import Manipulate Data 'Shiny'. R package version 1.5.3, https://dreamrs.github.io/datamods/, https://github.com/dreamRs/datamods.","code":"@Manual{,   title = {datamods: Modules to Import and Manipulate Data in 'Shiny'},   author = {Victor Perrier and Fanny Meyer and Samra Goumri and Zauad Shahreer Abeer},   year = {2024},   note = {R package version 1.5.3, https://dreamrs.github.io/datamods/},   url = {https://github.com/dreamRs/datamods}, }"},{"path":"https://dreamrs.github.io/datamods/index.html","id":"datamods","dir":"","previous_headings":"","what":"Modules to Import and Manipulate Data in Shiny","title":"Modules to Import and Manipulate Data in Shiny","text":"Shiny modules import manipulate data application addin.","code":""},{"path":"https://dreamrs.github.io/datamods/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Modules to Import and Manipulate Data in Shiny","text":"package provides custom shiny modules import data various sources, select, rename convert variables dataset validate content validate package. modules can used standard shiny application RStudio add-.","code":""},{"path":"https://dreamrs.github.io/datamods/index.html","id":"internationalization","dir":"","previous_headings":"","what":"Internationalization","title":"Modules to Import and Manipulate Data in Shiny","text":"Currently can use {datamods} following language:  english (default),  french,  macedonian,  brazilian portuguese,  albanian,  chinese,  spanish,  german,  turkish,  korean,  polish,  japanese. want another language supported, can submit Pull Request add CSV file like one used french (file located inst/i18n folder package, can see GitHub). See online vignette topic.","code":""},{"path":"https://dreamrs.github.io/datamods/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Modules to Import and Manipulate Data in Shiny","text":"Install CRAN : can install development version datamods GitHub :","code":"install.packages(\"datamods\") remotes::install_github(\"dreamRs/datamods\")"},{"path":"https://dreamrs.github.io/datamods/index.html","id":"import","dir":"","previous_headings":"","what":"Import","title":"Modules to Import and Manipulate Data in Shiny","text":"Import data : environment: Global environment package file: text files, Excel, SAS SPSS format… anything package rio can handle copy/paste: paste data source like Excel text file Google Sheet: use URL import Googlesheet URL: use URL import flat table module available form import_file_ui() / import_file_server() can use independently. modules can launched together modal window via import_modal() / import_server():  module also allow view imported data update variables.","code":""},{"path":"https://dreamrs.github.io/datamods/index.html","id":"update","dir":"","previous_headings":"","what":"Update","title":"Modules to Import and Manipulate Data in Shiny","text":"Module update_variables_ui() / update_variables_server() allow : select variables interest dataset rename variables used application convert variables change class, character numeric example","code":""},{"path":"https://dreamrs.github.io/datamods/index.html","id":"validate","dir":"","previous_headings":"","what":"Validate","title":"Modules to Import and Manipulate Data in Shiny","text":"Define validation rules package validate check whether data lives expectations.","code":""},{"path":"https://dreamrs.github.io/datamods/index.html","id":"filter","dir":"","previous_headings":"","what":"Filter","title":"Modules to Import and Manipulate Data in Shiny","text":"Interactively filter data.frame, module also generates code reproduce filters.","code":""},{"path":"https://dreamrs.github.io/datamods/index.html","id":"sample","dir":"","previous_headings":"","what":"Sample","title":"Modules to Import and Manipulate Data in Shiny","text":"module extracts sample data.frame, based either fixed number rows percentage total rows.","code":""},{"path":"https://dreamrs.github.io/datamods/index.html","id":"edit","dir":"","previous_headings":"","what":"Edit","title":"Modules to Import and Manipulate Data in Shiny","text":"module makes data.frame editable, allowing user add, modify delete rows.","code":""},{"path":"https://dreamrs.github.io/datamods/index.html","id":"create-column","dir":"","previous_headings":"","what":"Create column","title":"Modules to Import and Manipulate Data in Shiny","text":"module allow enter expression create new column data.frame.","code":""},{"path":"https://dreamrs.github.io/datamods/index.html","id":"cut-numeric-variable","dir":"","previous_headings":"","what":"Cut numeric variable","title":"Modules to Import and Manipulate Data in Shiny","text":"module contain interface cut numeric several intervals.","code":""},{"path":"https://dreamrs.github.io/datamods/index.html","id":"update-factor","dir":"","previous_headings":"","what":"Update factor","title":"Modules to Import and Manipulate Data in Shiny","text":"module contain interface reorder levels factor variable.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/create-column.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new column — create-column","title":"Create new column — create-column","text":"module allow enter expression create new column data.frame.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/create-column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new column — create-column","text":"","code":"create_column_ui(id)  create_column_server(   id,   data_r = reactive(NULL),   allowed_operations = list_allowed_operations() )  list_allowed_operations()  modal_create_column(   id,   title = i18n(\"Create a new column\"),   easyClose = TRUE,   size = \"l\",   footer = NULL )  winbox_create_column(   id,   title = i18n(\"Create a new column\"),   options = shinyWidgets::wbOptions(),   controls = shinyWidgets::wbControls() )  winbox_update_factor(   id,   title = i18n(\"Update levels of a factor\"),   options = shinyWidgets::wbOptions(),   controls = shinyWidgets::wbControls() )"},{"path":"https://dreamrs.github.io/datamods/reference/create-column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new column — create-column","text":"id Module's ID. data_r shiny::reactive() function returning data.frame. allowed_operations list allowed operations, see details. title optional title dialog. easyClose TRUE, modal dialog can dismissed clicking outside dialog box, pressing Escape key. FALSE (default), modal dialog dismissed ways; instead must dismissed clicking modalButton(), call removeModal() server. size One \"s\" small, \"m\" (default) medium, \"l\" large, \"xl\" extra large. Note \"xl\" works Bootstrap 4 (opt-Bootstrap 4+, pass bslib::bs_theme() theme argument page container like fluidPage()). footer UI footer. Use NULL footer. options List options, see wbOptions(). controls List controls, see wbControls().","code":""},{"path":"https://dreamrs.github.io/datamods/reference/create-column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create new column — create-column","text":"shiny::reactive() function returning data.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/create-column.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create new column — create-column","text":"User can use subset function: (, c, +, -, *, ^, %%, %/%, /, ==, >, <, !=, <=, >=, &, |, abs, sign, sqrt, ceiling, floor, trunc, cummax, cummin, cumprod, cumsum, exp, expm1, log, log10, log2, log1p, cos, cosh, sin, sinh, tan, tanh, acos, acosh, asin, asinh, atan, atanh, cospi, sinpi, tanpi, gamma, lgamma, digamma, trigamma, round, signif, max, min, range, prod, sum, , , pmin, pmax, mean, paste, paste0, substr, nchar, trimws, gsub, sub, grepl, ifelse, length, .numeric, .character, .integer, .Date, .POSIXct, .factor, factor. can add operations using allowed_operations argument,  example want allow use package lubridate, can :","code":"c(list_allowed_operations(), getNamespaceExports(\"lubridate\"))"},{"path":"https://dreamrs.github.io/datamods/reference/create-column.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create new column — create-column","text":"","code":"library(shiny) library(datamods) library(reactable)  ui <- fluidPage(   theme = bslib::bs_theme(version = 5L, preset = \"bootstrap\"),   shinyWidgets::html_dependency_winbox(),   tags$h2(\"Create new column\"),   fluidRow(     column(       width = 4,       create_column_ui(\"inline\"),       actionButton(\"modal\", \"Or click here to open a modal to create a column\"),       tags$br(), tags$br(),       actionButton(\"winbox\", \"Or click here to open a WinBox to create a column\")     ),     column(       width = 8,       reactableOutput(outputId = \"table\"),       verbatimTextOutput(\"code\")     )   ) )  server <- function(input, output, session) {    rv <- reactiveValues(data = MASS::Cars93[, c(1, 3, 4, 5, 6, 10)])    # inline mode   data_inline_r <- create_column_server(     id = \"inline\",     data_r = reactive(rv$data)   )   observeEvent(data_inline_r(), rv$data <- data_inline_r())    # modal window mode   observeEvent(input$modal, modal_create_column(\"modal\"))   data_modal_r <- create_column_server(     id = \"modal\",     data_r = reactive(rv$data)   )   observeEvent(data_modal_r(), rv$data <- data_modal_r())    # WinBox window mode   observeEvent(input$winbox, winbox_create_column(\"winbox\"))   data_winbox_r <- create_column_server(     id = \"winbox\",     data_r = reactive(rv$data)   )   observeEvent(data_winbox_r(), rv$data <- data_winbox_r())    # Show result   output$table <- renderReactable({     data <- req(rv$data)     reactable(       data = data,       bordered = TRUE,       compact = TRUE,       striped = TRUE     )   })    output$code <- renderPrint({     attr(rv$data, \"code\")   }) }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/datamods/reference/cut-variable.html","id":null,"dir":"Reference","previous_headings":"","what":"Module to Convert Numeric to Factor — cut-variable","title":"Module to Convert Numeric to Factor — cut-variable","text":"module contain interface cut numeric several intervals.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/cut-variable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Module to Convert Numeric to Factor — cut-variable","text":"","code":"cut_variable_ui(id)  cut_variable_server(id, data_r = reactive(NULL))  modal_cut_variable(   id,   title = i18n(\"Convert Numeric to Factor\"),   easyClose = TRUE,   size = \"l\",   footer = NULL )  winbox_cut_variable(   id,   title = i18n(\"Convert Numeric to Factor\"),   options = shinyWidgets::wbOptions(),   controls = shinyWidgets::wbControls() )"},{"path":"https://dreamrs.github.io/datamods/reference/cut-variable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Module to Convert Numeric to Factor — cut-variable","text":"id Module ID. data_r shiny::reactive() function returning data.frame. title optional title dialog. easyClose TRUE, modal dialog can dismissed clicking outside dialog box, pressing Escape key. FALSE (default), modal dialog dismissed ways; instead must dismissed clicking modalButton(), call removeModal() server. size One \"s\" small, \"m\" (default) medium, \"l\" large, \"xl\" extra large. Note \"xl\" works Bootstrap 4 (opt-Bootstrap 4+, pass bslib::bs_theme() theme argument page container like fluidPage()). footer UI footer. Use NULL footer. options List options, see wbOptions(). controls List controls, see wbControls().","code":""},{"path":"https://dreamrs.github.io/datamods/reference/cut-variable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Module to Convert Numeric to Factor — cut-variable","text":"shiny::reactive() function returning data.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/cut-variable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Module to Convert Numeric to Factor — cut-variable","text":"","code":"library(shiny) library(datamods) library(reactable)  ui <- fluidPage(   theme = bslib::bs_theme(version = 5L, preset = \"bootstrap\"),   shinyWidgets::html_dependency_winbox(),   tags$h2(\"Convert Numeric to Factor\"),   fluidRow(     column(       width = 6,       cut_variable_ui(\"inline\"),       actionButton(\"modal\", \"Or click here to open a modal to cut a variable\"),       tags$br(), tags$br(),       actionButton(\"winbox\", \"Or click here to open a WinBox to cut a variable\")     ),     column(       width = 6,       reactableOutput(outputId = \"table\"),       verbatimTextOutput(\"code\")     )   ) )  server <- function(input, output, session) {    rv <- reactiveValues(data = MASS::Cars93[, c(1, 3, 4, 5, 6, 10)])    # inline mode   data_inline_r <- cut_variable_server(     id = \"inline\",     data_r = reactive(rv$data)   )   observeEvent(data_inline_r(), rv$data <- data_inline_r())    # modal window mode   observeEvent(input$modal, modal_cut_variable(\"modal\"))   data_modal_r <- cut_variable_server(     id = \"modal\",     data_r = reactive(rv$data)   )   observeEvent(data_modal_r(), rv$data <- data_modal_r())    # WinBox window mode   observeEvent(input$winbox, winbox_cut_variable(\"winbox\"))   data_winbox_r <- cut_variable_server(     id = \"winbox\",     data_r = reactive(rv$data)   )   observeEvent(data_winbox_r(), rv$data <- data_winbox_r())    # Show result   output$table <- renderReactable({     data <- req(rv$data)     reactable(       data = data,       bordered = TRUE,       compact = TRUE,       striped = TRUE     )   })    output$code <- renderPrint({     attr(rv$data, \"code\")   }) }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/datamods/reference/demo_edit.html","id":null,"dir":"Reference","previous_headings":"","what":"Customer Credit Card Information — demo_edit","title":"Customer Credit Card Information — demo_edit","text":"subset fake customer credit card information inspired {charlatan} package.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/demo_edit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Customer Credit Card Information — demo_edit","text":"","code":"demo_edit"},{"path":[]},{"path":"https://dreamrs.github.io/datamods/reference/demo_edit.html","id":"demo-edit","dir":"Reference","previous_headings":"","what":"demo_edit","title":"Customer Credit Card Information — demo_edit","text":"data frame 20 rows 6 columns: name Customer name job Customer job credit_card_provider Credit card provider credit_card_security_code Credit card security code date_obtained Date obtaining credit card contactless_card Contactless card","code":""},{"path":"https://dreamrs.github.io/datamods/reference/demo_edit.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Customer Credit Card Information — demo_edit","text":"https://CRAN.R-project.org/package=charlatan","code":""},{"path":"https://dreamrs.github.io/datamods/reference/edit-data.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny module to interactively edit a data.frame — edit-data","title":"Shiny module to interactively edit a data.frame — edit-data","text":"module generates different options edit data.frame: adding, deleting modifying rows, exporting data (csv excel), choosing editable columns, choosing mandatory columns. module returns edited table user modifications.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/edit-data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny module to interactively edit a data.frame — edit-data","text":"","code":"edit_data_ui(id)  edit_data_server(   id,   data_r = reactive(NULL),   add = TRUE,   update = TRUE,   delete = TRUE,   download_csv = TRUE,   download_excel = TRUE,   file_name_export = \"data\",   var_edit = NULL,   var_mandatory = NULL,   var_labels = NULL,   add_default_values = list(),   n_column = 1,   return_class = c(\"data.frame\", \"data.table\", \"tbl_df\", \"raw\"),   reactable_options = NULL,   modal_size = c(\"m\", \"s\", \"l\", \"xl\"),   modal_easy_close = TRUE,   callback_add = NULL,   callback_update = NULL,   callback_delete = NULL,   only_callback = FALSE,   use_notify = TRUE )"},{"path":"https://dreamrs.github.io/datamods/reference/edit-data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny module to interactively edit a data.frame — edit-data","text":"id Module ID data_r data_r reactive function containing data.frame use module. add boolean, TRUE, allows add row table via button top right. update boolean, TRUE, allows modify row table via button located table row want edit. delete boolean, TRUE, allows row deleted table via button table. download_csv TRUE, allows export table csv format via download button. download_excel TRUE, allows export table excel format via download button. file_name_export character allows choose export name downloaded file. var_edit vector character allows choose names editable columns. var_mandatory vector character allows choose obligatory fields fill. var_labels named list, names colnames values labels used edit modal. add_default_values Default values use input control adding new data, e.g. list(my_var_text = \"Default text display\"). n_column Number column edit modal window, must number divide 12 since use Bootstrap grid system shiny::column(). return_class Class returned data: data.frame, data.table, tbl_df (tibble) raw. reactable_options Options passed reactable::reactable(). modal_size character allows choose size modalDialog. One \"s\" small, \"m\" (default) medium, \"l\" large, \"xl\" extra large. modal_easy_close boolean TRUE, modalDialog can dismissed clicking outside dialog box, pressing Escape key. FALSE (default), modalDialog dismissed ways; instead must dismissed clicking modalButton(), call removeModal() server. callback_add, callback_update, callback_delete Functions executed just action (add, update delete) performed data. Functions used must like function(data, row) {...} : data data table moment function called row contain either new row data (add), updated row (update) row deleted (delete). return value callback function truthy (see shiny::isTruthy()) action cancelled. only_callback use callbacks, alter data within module. use_notify Display information user shinybusy::notify().","code":""},{"path":"https://dreamrs.github.io/datamods/reference/edit-data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shiny module to interactively edit a data.frame — edit-data","text":"edited data.frame reactable format user modifications","code":""},{"path":"https://dreamrs.github.io/datamods/reference/edit-data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shiny module to interactively edit a data.frame — edit-data","text":"","code":"library(shiny) library(datamods) library(bslib) #>  #> Attaching package: ‘bslib’ #> The following object is masked from ‘package:utils’: #>  #>     page library(reactable)  ui <- fluidPage(   theme = bs_theme(     version = 5   ),   tags$h2(\"Edit data\", align = \"center\"),   edit_data_ui(id = \"id\"),   verbatimTextOutput(\"result\") )   server <- function(input, output, session) {    edited_r <- edit_data_server(     id = \"id\",     data_r = reactive(demo_edit),     add = TRUE,     update = TRUE,     delete = TRUE,     download_csv = TRUE,     download_excel = TRUE,     file_name_export = \"datas\",     # var_edit = c(\"name\", \"job\", \"credit_card_provider\", \"credit_card_security_code\"),     var_mandatory = c(\"name\", \"job\"),     var_labels = list(       name = \"Name\",       credit_card_security_code = \"Credit card security code\",       date_obtained = \"Date obtained\",       contactless_card = \"Contactless Card\",       credit_card_provider = \"Credit card provider\"     ),     add_default_values = list(       name = \"Please enter your name here\",       date_obtained = Sys.Date()     ),     n_column = 2,     modal_size = \"l\",     modal_easy_close = TRUE,     reactable_options = list(       defaultColDef = colDef(filterable = TRUE),       selection = \"single\",       columns = list(         name = colDef(name = \"Name\", style = list(fontWeight = \"bold\")),         credit_card_security_code = colDef(name = \"Credit card security code\"),         date_obtained = colDef(name = \"Date obtained\", format = colFormat(date = TRUE)),         contactless_card = colDef(           name = \"Contactless Card\",           cell = function(value) {             # Render as an X mark or check mark             if (value == FALSE) \"\\u274c No\" else \"\\u2714\\ufe0f Yes\"           }),         credit_card_provider = colDef(           name = \"Credit card provider\",           style = function(value) {             if (value == \"Mastercard\") {               color <- \"#e06631\"             } else if (value == \"VISA 16 digit\") {               color <- \"#0c13cf\"             } else if (value == \"American Express\") {               color <- \"#4d8be8\"             } else if (value == \"JCB 16 digit\") {               color <- \"#23c45e\"             } else {               color <- \"#777\"             }             list(color = color, fontWeight = \"bold\")           }         )       ),       bordered = TRUE,       compact = TRUE,       searchable = TRUE,       highlight = TRUE     )   )    output$result <- renderPrint({     str(edited_r())   })  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/datamods/reference/filter-data.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny module to interactively filter a data.frame — filter-data","title":"Shiny module to interactively filter a data.frame — filter-data","text":"Module generate inputs filter data.frame according column's type. Code reproduce filter returned expression filtered data.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/filter-data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny module to interactively filter a data.frame — filter-data","text":"","code":"filter_data_ui(id, show_nrow = TRUE, max_height = NULL)  filter_data_server(   id,   data = reactive(NULL),   vars = reactive(NULL),   name = reactive(\"data\"),   defaults = reactive(NULL),   drop_ids = getOption(\"datamods.filter.drop_ids\", default = TRUE),   widget_char = c(\"virtualSelect\", \"select\", \"picker\"),   widget_num = c(\"slider\", \"range\"),   widget_date = c(\"slider\", \"range\"),   label_na = \"NA\",   value_na = TRUE )"},{"path":"https://dreamrs.github.io/datamods/reference/filter-data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny module to interactively filter a data.frame — filter-data","text":"id Module id. See shiny::moduleServer(). show_nrow Show number filtered rows total. max_height Maximum height filters panel, useful many variables filter limited space. data shiny::reactive() function returning data.frame filter. vars shiny::reactive() function returning character vector variables add filter. named list, names used labels. name shiny::reactive() function returning character string representing data name, used code generated. defaults shiny::reactive() function returning named list variable:value pairs used set filters. drop_ids Drop columns containing 90% unique values, 50 distinct values. Use FALSE disable use list(p = 0.9, n = 50) customize threshold values. widget_char Widget use character variables: shinyWidgets::pickerInput() shiny::selectInput() (default). widget_num Widget use numeric variables: shinyWidgets::numericRangeInput() shiny::sliderInput() (default). widget_date Widget use date/time variables: shiny::dateRangeInput() shiny::sliderInput() (default). label_na Label missing value widget. value_na Default value NA's filters.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/filter-data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shiny module to interactively filter a data.frame — filter-data","text":"UI: HTML tags can included shiny's UI Server: list four slots: filtered: reactive function returning data filtered. code: reactive function returning dplyr pipeline filter data. expr: reactive function returning expression filter data. values: reactive function returning named list variables filter values.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/filter-data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shiny module to interactively filter a data.frame — filter-data","text":"","code":"library(shiny) library(shinyWidgets) library(datamods) library(MASS)  # Add some NAs to mpg mtcars_na <- mtcars mtcars_na[] <- lapply(   X = mtcars_na,   FUN = function(x) {     x[sample.int(n = length(x), size = sample(5:10, 1))] <- NA     x   } )  datetime <- data.frame(   date = seq(Sys.Date(), by = \"day\", length.out = 300),   datetime = seq(Sys.time(), by = \"hour\", length.out = 300),   num = sample.int(1e5, 300) )  one_column_numeric <- data.frame(   var1 = rnorm(100) )  ui <- fluidPage(   tags$h2(\"Filter data.frame\"),   actionButton(\"saveFilterButton\",\"Save Filter Values\"),   actionButton(\"loadFilterButton\",\"Load Filter Values\"),   radioButtons(     inputId = \"dataset\",     label = \"Data:\",     choices = c(       \"iris\",       \"mtcars\",       \"mtcars_na\",       \"Cars93\",       \"datetime\",       \"one_column_numeric\"     ),     inline = TRUE   ),    fluidRow(     column(       width = 3,       filter_data_ui(\"filtering\", max_height = \"500px\")     ),     column(       width = 9,       progressBar(         id = \"pbar\", value = 100,         total = 100, display_pct = TRUE       ),       reactable::reactableOutput(outputId = \"table\"),       tags$b(\"Code dplyr:\"),       verbatimTextOutput(outputId = \"code_dplyr\"),       tags$b(\"Expression:\"),       verbatimTextOutput(outputId = \"code\"),       tags$b(\"Filtered data:\"),       verbatimTextOutput(outputId = \"res_str\")     )   ) )  server <- function(input, output, session) {   savedFilterValues <- reactiveVal()   data <- reactive({     get(input$dataset)   })    vars <- reactive({     if (identical(input$dataset, \"mtcars\")) {       setNames(as.list(names(mtcars)[1:5]), c(         \"Miles/(US) gallon\",         \"Number of cylinders\",         \"Displacement (cu.in.)\",         \"Gross horsepower\",         \"Rear axle ratio\"       ))     } else {       NULL     }   })      observeEvent(input$saveFilterButton,{     savedFilterValues <<- res_filter$values()   },ignoreInit = T)      defaults <- reactive({     input$loadFilterButton     savedFilterValues   })    res_filter <- filter_data_server(     id = \"filtering\",     data = data,     name = reactive(input$dataset),     vars = vars,     defaults = defaults,     widget_num = \"slider\",     widget_date = \"slider\",     label_na = \"Missing\"   )    observeEvent(res_filter$filtered(), {     updateProgressBar(       session = session, id = \"pbar\",       value = nrow(res_filter$filtered()), total = nrow(data())     )   })    output$table <- reactable::renderReactable({     reactable::reactable(res_filter$filtered())   })     output$code_dplyr <- renderPrint({     res_filter$code()   })   output$code <- renderPrint({     res_filter$expr()   })    output$res_str <- renderPrint({     str(res_filter$filtered())   })  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/datamods/reference/get_data_packages.html","id":null,"dir":"Reference","previous_headings":"","what":"Get packages containing datasets — get_data_packages","title":"Get packages containing datasets — get_data_packages","text":"Get packages containing datasets","code":""},{"path":"https://dreamrs.github.io/datamods/reference/get_data_packages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get packages containing datasets — get_data_packages","text":"","code":"get_data_packages()"},{"path":"https://dreamrs.github.io/datamods/reference/get_data_packages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get packages containing datasets — get_data_packages","text":"character vector packages names","code":""},{"path":"https://dreamrs.github.io/datamods/reference/get_data_packages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get packages containing datasets — get_data_packages","text":"","code":"if (interactive()) {    get_data_packages()  }"},{"path":"https://dreamrs.github.io/datamods/reference/i18n.html","id":null,"dir":"Reference","previous_headings":"","what":"Internationalization — i18n","title":"Internationalization — i18n","text":"Simple mechanism translate labels Shiny application.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/i18n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internationalization — i18n","text":"","code":"i18n(x, translations = i18n_translations())  i18n_translations(package = packageName(parent.frame(2)))  set_i18n(value, packages = c(\"datamods\", \"esquisse\"))"},{"path":"https://dreamrs.github.io/datamods/reference/i18n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internationalization — i18n","text":"x Label translate. translations Either list data.frame translations. package Name package function called, use NULL outside package. retrieve option \"i18n.<PACKAGE>\" (\"i18n\" package) returns appropriate labels. value Value set translation. Can : single character use supported language (\"fr\", \"mk\", \"al\", \"pt\" esquisse datamods packages). list labels names translations values. data.frame 2 column: label & translation. path CSV file structure data.frame . packages Name packages set i18n, default esquisse datamods","code":""},{"path":"https://dreamrs.github.io/datamods/reference/i18n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internationalization — i18n","text":"i18n() returns character, i18n_translations() returns list data.frame.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/i18n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Internationalization — i18n","text":"","code":"library(datamods)  # Use with an objet my.translations <- list(   \"Hello\" = \"Bonjour\" ) i18n(\"Hello\", my.translations) #> [1] \"Bonjour\"  # Use with options() options(\"i18n\" = list(   \"Hello\" = \"Bonjour\" )) i18n(\"Hello\") #> [1] \"Bonjour\"  # With a package options(\"datamods.i18n\" = \"fr\") i18n(\"Browse...\", translations = i18n_translations(\"datamods\")) #> [1] \"Parcourir...\" # If you call i18n() from within a function of your package # you don't need second argument, e.g.: # i18n(\"Browse...\")"},{"path":"https://dreamrs.github.io/datamods/reference/import-copypaste.html","id":null,"dir":"Reference","previous_headings":"","what":"Import data with copy & paste — import-copypaste","title":"Import data with copy & paste — import-copypaste","text":"Let user copy data Excel text file paste text area import .","code":""},{"path":"https://dreamrs.github.io/datamods/reference/import-copypaste.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import data with copy & paste — import-copypaste","text":"","code":"import_copypaste_ui(id, title = TRUE, name_field = TRUE)  import_copypaste_server(   id,   btn_show_data = TRUE,   show_data_in = c(\"popup\", \"modal\"),   trigger_return = c(\"button\", \"change\"),   return_class = c(\"data.frame\", \"data.table\", \"tbl_df\", \"raw\"),   reset = reactive(NULL),   fread_args = list() )"},{"path":"https://dreamrs.github.io/datamods/reference/import-copypaste.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import data with copy & paste — import-copypaste","text":"id Module's ID. title Module's title, TRUE use default title, use NULL title shiny.tag custom one. name_field Show field add name data (returned server-side). btn_show_data Display button display data modal window import successful. show_data_in display data: \"popup\" \"modal\" window. trigger_return update selected data: \"button\" (user click button) \"change\" (time user select dataset list). return_class Class returned data: data.frame, data.table, tbl_df (tibble) raw. reset reactive function triggered resets data. fread_args list additional arguments pass data.table::fread() reading data.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/import-copypaste.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import data with copy & paste — import-copypaste","text":"UI: HTML tags can included shiny's UI Server: list three slots: status: reactive function returning status: NULL, error success. name: reactive function returning name imported data character. data: reactive function returning imported data.frame.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/import-copypaste.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import data with copy & paste — import-copypaste","text":"","code":"library(shiny) library(datamods)  ui <- fluidPage(   tags$h3(\"Import data with copy & paste\"),   fluidRow(     column(       width = 4,       import_copypaste_ui(\"myid\")     ),     column(       width = 8,       tags$b(\"Import status:\"),       verbatimTextOutput(outputId = \"status\"),       tags$b(\"Name:\"),       verbatimTextOutput(outputId = \"name\"),       tags$b(\"Data:\"),       verbatimTextOutput(outputId = \"data\")     )   ) )  server <- function(input, output, session) {    imported <- import_copypaste_server(\"myid\")    output$status <- renderPrint({     imported$status()   })   output$name <- renderPrint({     imported$name()   })   output$data <- renderPrint({     imported$data()   })  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/datamods/reference/import-file.html","id":null,"dir":"Reference","previous_headings":"","what":"Import data from a file — import-file","title":"Import data from a file — import-file","text":"Let user upload file import data","code":""},{"path":"https://dreamrs.github.io/datamods/reference/import-file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import data from a file — import-file","text":"","code":"import_file_ui(   id,   title = TRUE,   preview_data = TRUE,   file_extensions = c(\".csv\", \".txt\", \".xls\", \".xlsx\", \".rds\", \".fst\", \".sas7bdat\",     \".sav\"),   layout_params = c(\"dropdown\", \"inline\") )  import_file_server(   id,   btn_show_data = TRUE,   show_data_in = c(\"popup\", \"modal\"),   trigger_return = c(\"button\", \"change\"),   return_class = c(\"data.frame\", \"data.table\", \"tbl_df\", \"raw\"),   reset = reactive(NULL),   read_fns = list() )"},{"path":"https://dreamrs.github.io/datamods/reference/import-file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import data from a file — import-file","text":"id Module's ID. title Module's title, TRUE use default title, use NULL title shiny.tag custom one. preview_data Show preview data file input. file_extensions File extensions accepted shiny::fileInput(), can also MIME type. layout_params display import parameters : dropdown button inline file input. btn_show_data Display button display data modal window import successful. show_data_in display data: \"popup\" \"modal\" window. trigger_return update selected data: \"button\" (user click button) \"change\" (time user select dataset list). return_class Class returned data: data.frame, data.table, tbl_df (tibble) raw. reset reactive function triggered resets data. read_fns Named list custom function(s) read data: name must extension files function applied value must function can 5 arguments (can ignore , use names), passed user interface: file: path file sheet: Excel files, sheet read skip: number row skip dec: decimal separator encoding: file encoding na.strings: character(s) interpret missing values.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/import-file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import data from a file — import-file","text":"UI: HTML tags can included shiny's UI Server: list three slots: status: reactive function returning status: NULL, error success. name: reactive function returning name imported data character. data: reactive function returning imported data.frame.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/import-file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import data from a file — import-file","text":"","code":"library(shiny) library(datamods)  ui <- fluidPage(   # theme = bslib::bs_theme(version = 5L),   # theme = bslib::bs_theme(version = 5L, preset = \"bootstrap\"),   tags$h3(\"Import data from a file\"),   fluidRow(     column(       width = 4,       import_file_ui(         id = \"myid\",         file_extensions = c(\".csv\", \".txt\", \".xls\", \".xlsx\", \".json\"),         layout_params = \"inline\" # or \"dropdown\"       )     ),     column(       width = 8,       tags$b(\"Import status:\"),       verbatimTextOutput(outputId = \"status\"),       tags$b(\"Name:\"),       verbatimTextOutput(outputId = \"name\"),       tags$b(\"Code:\"),       verbatimTextOutput(outputId = \"code\"),       tags$b(\"Data:\"),       verbatimTextOutput(outputId = \"data\")     )   ) ) #> Warning: i18n: translation for 'Missing values character(s):' not found! #> Warning: i18n: translation for 'if several use a comma (',') to separate them' not found!  server <- function(input, output, session) {    imported <- import_file_server(     id = \"myid\",     # Custom functions to read data     read_fns = list(       xls = function(file, sheet, skip, encoding) {         readxl::read_xls(path = file, sheet = sheet, skip = skip)       },       json = function(file) {         jsonlite::read_json(file, simplifyVector = TRUE)       }     ),     show_data_in = \"modal\"   )    output$status <- renderPrint({     imported$status()   })   output$name <- renderPrint({     imported$name()   })   output$code <- renderPrint({     imported$code()   })   output$data <- renderPrint({     imported$data()   })  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/datamods/reference/import-globalenv.html","id":null,"dir":"Reference","previous_headings":"","what":"Import data from an Environment — import-globalenv","title":"Import data from an Environment — import-globalenv","text":"Let user select dataset environment package's environment.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/import-globalenv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import data from an Environment — import-globalenv","text":"","code":"import_globalenv_ui(   id,   globalenv = TRUE,   packages = get_data_packages(),   title = TRUE )  import_globalenv_server(   id,   btn_show_data = TRUE,   show_data_in = c(\"popup\", \"modal\"),   trigger_return = c(\"button\", \"change\"),   return_class = c(\"data.frame\", \"data.table\", \"tbl_df\", \"raw\"),   reset = reactive(NULL) )"},{"path":"https://dreamrs.github.io/datamods/reference/import-globalenv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import data from an Environment — import-globalenv","text":"id Module's ID. globalenv Search data Global environment. packages Name packages search data. title Module's title, TRUE use default title, use NULL title shiny.tag custom one. btn_show_data Display button display data modal window import successful. show_data_in display data: \"popup\" \"modal\" window. trigger_return update selected data: \"button\" (user click button) \"change\" (time user select dataset list). return_class Class returned data: data.frame, data.table, tbl_df (tibble) raw. reset reactive function triggered resets data.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/import-globalenv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import data from an Environment — import-globalenv","text":"UI: HTML tags can included shiny's UI Server: list three slots: status: reactive function returning status: NULL, error success. name: reactive function returning name imported data character. data: reactive function returning imported data.frame.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/import-globalenv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import data from an Environment — import-globalenv","text":"","code":"if (interactive()) {   library(shiny)   library(datamods)    # Create some data.frames    my_df <- data.frame(     variable1 = sample(letters, 20, TRUE),     variable2 = sample(1:100, 20, TRUE)   )    results_analysis <- data.frame(     id = sample(letters, 20, TRUE),     measure = sample(1:100, 20, TRUE),     response = sample(1:100, 20, TRUE)   )     # Application    ui <- fluidPage(     fluidRow(       column(         width = 4,         import_globalenv_ui(\"myid\")       ),       column(         width = 8,         tags$b(\"Import status:\"),         verbatimTextOutput(outputId = \"status\"),         tags$b(\"Name:\"),         verbatimTextOutput(outputId = \"name\"),         tags$b(\"Data:\"),         verbatimTextOutput(outputId = \"data\")       )     )   )    server <- function(input, output, session) {      imported <- import_globalenv_server(\"myid\")      output$status <- renderPrint({       imported$status()     })     output$name <- renderPrint({       imported$name()     })     output$data <- renderPrint({       imported$data()     })    }    shinyApp(ui, server) }"},{"path":"https://dreamrs.github.io/datamods/reference/import-googlesheets.html","id":null,"dir":"Reference","previous_headings":"","what":"Import data from Googlesheet — import-googlesheets","title":"Import data from Googlesheet — import-googlesheets","text":"Let user paste link Google sheet import data.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/import-googlesheets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import data from Googlesheet — import-googlesheets","text":"","code":"import_googlesheets_ui(id, title = TRUE)  import_googlesheets_server(   id,   btn_show_data = TRUE,   show_data_in = c(\"popup\", \"modal\"),   trigger_return = c(\"button\", \"change\"),   return_class = c(\"data.frame\", \"data.table\", \"tbl_df\", \"raw\"),   reset = reactive(NULL) )"},{"path":"https://dreamrs.github.io/datamods/reference/import-googlesheets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import data from Googlesheet — import-googlesheets","text":"id Module's ID. title Module's title, TRUE use default title, use NULL title shiny.tag custom one. btn_show_data Display button display data modal window import successful. show_data_in display data: \"popup\" \"modal\" window. trigger_return update selected data: \"button\" (user click button) \"change\" (time user select dataset list). return_class Class returned data: data.frame, data.table, tbl_df (tibble) raw. reset reactive function triggered resets data.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/import-googlesheets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import data from Googlesheet — import-googlesheets","text":"UI: HTML tags can included shiny's UI Server: list three slots: status: reactive function returning status: NULL, error success. name: reactive function returning name imported data character. data: reactive function returning imported data.frame.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/import-googlesheets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import data from Googlesheet — import-googlesheets","text":"","code":"library(shiny) library(datamods)  ui <- fluidPage(   tags$h3(\"Import data from Googlesheets\"),   fluidRow(     column(       width = 4,       import_googlesheets_ui(\"myid\")     ),     column(       width = 8,       tags$b(\"Import status:\"),       verbatimTextOutput(outputId = \"status\"),       tags$b(\"Name:\"),       verbatimTextOutput(outputId = \"name\"),       tags$b(\"Data:\"),       verbatimTextOutput(outputId = \"data\")     )   ) )  server <- function(input, output, session) {    imported <- import_googlesheets_server(\"myid\")    output$status <- renderPrint({     imported$status()   })   output$name <- renderPrint({     imported$name()   })   output$data <- renderPrint({     imported$data()   })  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/datamods/reference/import-modal.html","id":null,"dir":"Reference","previous_headings":"","what":"Import from all sources — import-modal","title":"Import from all sources — import-modal","text":"Wrap import modules one, can displayed inline modal window..","code":""},{"path":"https://dreamrs.github.io/datamods/reference/import-modal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import from all sources — import-modal","text":"","code":"import_ui(   id,   from = c(\"env\", \"file\", \"copypaste\", \"googlesheets\", \"url\"),   file_extensions = c(\".csv\", \".txt\", \".xls\", \".xlsx\", \".rds\", \".fst\", \".sas7bdat\",     \".sav\") )  import_server(   id,   validation_opts = NULL,   allowed_status = c(\"OK\", \"Failed\", \"Error\"),   return_class = c(\"data.frame\", \"data.table\", \"tbl_df\", \"raw\"),   read_fns = list() )  import_modal(   id,   from,   title = i18n(\"Import data\"),   size = \"l\",   file_extensions = c(\".csv\", \".txt\", \".xls\", \".xlsx\", \".rds\", \".fst\", \".sas7bdat\",     \".sav\") )"},{"path":"https://dreamrs.github.io/datamods/reference/import-modal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import from all sources — import-modal","text":"id Module's id import_ui & server use, .e. method. 5 options choose . (\"env\", \"file\", \"copypaste\", \"googlesheets\", \"url\") file_extensions File extensions accepted shiny::fileInput(), can also MIME type. validation_opts list arguments passed [validation_server(). allowed_status Vector statuses allowed confirm dataset imported, want validation rules successful importing data use allowed_status = \"OK\". return_class Class returned data: data.frame, data.table, tbl_df (tibble) raw. read_fns Named list custom function(s) read data: name must extension files function applied value must function can 5 arguments (can ignore , use names), passed user interface: file: path file sheet: Excel files, sheet read skip: number row skip dec: decimal separator encoding: file encoding na.strings: character(s) interpret missing values. title Modal window title. size Modal window size, default \"l\" (large).","code":""},{"path":"https://dreamrs.github.io/datamods/reference/import-modal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import from all sources — import-modal","text":"UI: HTML tags can included shiny's UI Server: list three slots: status: reactive function returning status: NULL, error success. name: reactive function returning name imported data character. data: reactive function returning imported data.frame.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/import-modal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import from all sources — import-modal","text":"","code":"library(shiny) library(datamods)  ui <- fluidPage(   # Try with different Bootstrap version   theme = bslib::bs_theme(version = 5, preset = \"bootstrap\"),   fluidRow(     column(       width = 4,       checkboxGroupInput(         inputId = \"from\",         label = \"From\",         choices = c(\"env\", \"file\", \"copypaste\", \"googlesheets\", \"url\"),         selected = c(\"file\", \"copypaste\")       ),       actionButton(\"launch_modal\", \"Launch modal window\")     ),     column(       width = 8,       tags$b(\"Imported data:\"),       verbatimTextOutput(outputId = \"name\"),       verbatimTextOutput(outputId = \"data\"),       verbatimTextOutput(outputId = \"str_data\")     )   ) )  server <- function(input, output, session) {    observeEvent(input$launch_modal, {     req(input$from)     import_modal(       id = \"myid\",       from = input$from,       title = \"Import data to be used in application\"     )   })    imported <- import_server(\"myid\", return_class = \"tbl_df\")    output$name <- renderPrint({     req(imported$name())     imported$name()   })    output$data <- renderPrint({     req(imported$data())     imported$data()   })    output$str_data <- renderPrint({     req(imported$data())     str(imported$data())   })  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/datamods/reference/import-url.html","id":null,"dir":"Reference","previous_headings":"","what":"Import data from a URL — import-url","title":"Import data from a URL — import-url","text":"Let user paste link JSON import data.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/import-url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import data from a URL — import-url","text":"","code":"import_url_ui(id, title = TRUE)  import_url_server(   id,   btn_show_data = TRUE,   show_data_in = c(\"popup\", \"modal\"),   trigger_return = c(\"button\", \"change\"),   return_class = c(\"data.frame\", \"data.table\", \"tbl_df\", \"raw\"),   reset = reactive(NULL) )"},{"path":"https://dreamrs.github.io/datamods/reference/import-url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import data from a URL — import-url","text":"id Module's ID. title Module's title, TRUE use default title, use NULL title shiny.tag custom one. btn_show_data Display button display data modal window import successful. show_data_in display data: \"popup\" \"modal\" window. trigger_return update selected data: \"button\" (user click button) \"change\" (time user select dataset list). return_class Class returned data: data.frame, data.table, tbl_df (tibble) raw. reset reactive function triggered resets data.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/import-url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import data from a URL — import-url","text":"UI: HTML tags can included shiny's UI Server: list three slots: status: reactive function returning status: NULL, error success. name: reactive function returning name imported data character. data: reactive function returning imported data.frame.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/import-url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import data from a URL — import-url","text":"","code":"library(shiny) library(datamods)  ui <- fluidPage(   tags$h3(\"Import data from URL\"),   fluidRow(     column(       width = 4,       import_url_ui(\"myid\")     ),     column(       width = 8,       tags$b(\"Import status:\"),       verbatimTextOutput(outputId = \"status\"),       tags$b(\"Name:\"),       verbatimTextOutput(outputId = \"name\"),       tags$b(\"Data:\"),       verbatimTextOutput(outputId = \"data\")     )   ) )  server <- function(input, output, session) {    imported <- import_url_server(     \"myid\",     btn_show_data = FALSE,     return_class = \"raw\"   )    output$status <- renderPrint({     imported$status()   })   output$name <- renderPrint({     imported$name()   })   output$data <- renderPrint({     imported$data()   })  }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/datamods/reference/list_pkg_data.html","id":null,"dir":"Reference","previous_headings":"","what":"List dataset contained in a package — list_pkg_data","title":"List dataset contained in a package — list_pkg_data","text":"List dataset contained package","code":""},{"path":"https://dreamrs.github.io/datamods/reference/list_pkg_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List dataset contained in a package — list_pkg_data","text":"","code":"list_pkg_data(pkg)"},{"path":"https://dreamrs.github.io/datamods/reference/list_pkg_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List dataset contained in a package — list_pkg_data","text":"pkg Name package, must installed.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/list_pkg_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List dataset contained in a package — list_pkg_data","text":"character vector NULL.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/list_pkg_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List dataset contained in a package — list_pkg_data","text":"","code":"list_pkg_data(\"ggplot2\") #>  [1] \"diamonds\"       \"economics\"      \"economics_long\" \"faithfuld\"      #>  [5] \"luv_colours\"    \"midwest\"        \"mpg\"            \"msleep\"         #>  [9] \"presidential\"   \"seals\"          \"txhousing\"      #> attr(,\"package\") #> [1] \"ggplot2\""},{"path":"https://dreamrs.github.io/datamods/reference/module-sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny module to interactively sample a data.frame — module-sample","title":"Shiny module to interactively sample a data.frame — module-sample","text":"Allow take sample data.frame given number proportion rows keep.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/module-sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny module to interactively sample a data.frame — module-sample","text":"","code":"sample_ui(id)  sample_server(id, data_r = reactive(NULL))"},{"path":"https://dreamrs.github.io/datamods/reference/module-sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny module to interactively sample a data.frame — module-sample","text":"id Module id. See shiny::moduleServer(). data_r reactive containing data.frame use module.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/module-sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shiny module to interactively sample a data.frame — module-sample","text":"UI: HTML tags can included shiny's UI Server: reactive fgunction sampled data.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/module-sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shiny module to interactively sample a data.frame — module-sample","text":"","code":"library(shiny) library(datamods) library(reactable)   ui <- fluidPage(    tags$h2(\"Sampling\"),    fluidRow(     column(       width = 3,       sample_ui(\"myID\")     ),     column(       width = 9,       reactableOutput(\"table\")     )   ) )   server <- function(input, output, session) {    result_sample <- sample_server(\"myID\", reactive(iris))    output$table <- renderReactable({     table_sample <- reactable(       data = result_sample(),       defaultColDef = colDef(         align = \"center\"       ),       borderless = TRUE,       highlight = TRUE,       striped = TRUE     )     return(table_sample)   }) }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/datamods/reference/select-group.html","id":null,"dir":"Reference","previous_headings":"","what":"Select Group Input Module — select-group","title":"Select Group Input Module — select-group","text":"Group mutually dependent select menus filtering data.frame's columns (like Excel).","code":""},{"path":"https://dreamrs.github.io/datamods/reference/select-group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select Group Input Module — select-group","text":"","code":"select_group_ui(   id,   params,   label = NULL,   btn_reset_label = \"Reset filters\",   inline = TRUE,   vs_args = list() )  select_group_server(id, data_r, vars_r)"},{"path":"https://dreamrs.github.io/datamods/reference/select-group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select Group Input Module — select-group","text":"id Module's id. params list parameters passed shinyWidgets::virtualSelectInput(), can use : inputId: mandatory, must correspond variable name. label: Display label control. placeholder: Text show options selected. label Character, global label top labels. btn_reset_label Character, reset button label. NULL button added. inline TRUE (default), select menus horizontally positioned, otherwise vertically. vs_args Arguments passed shinyWidgets::virtualSelectInput() created. data_r Either data.frame() shiny::reactive() function returning data.frame (use parentheses). vars_r character, columns use create filters, must correspond variables listed params. Can shiny::reactive() function, values must included initial ones (params).","code":""},{"path":"https://dreamrs.github.io/datamods/reference/select-group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select Group Input Module — select-group","text":"shiny::reactive() function containing data filtered attribute inputs containing named list selected inputs.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/select-group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select Group Input Module — select-group","text":"","code":"# Default -----------------------------------------------------------------  library(shiny) library(datamods) library(shinyWidgets)   ui <- fluidPage(   # theme = bslib::bs_theme(version = 5L),   fluidRow(     column(       width = 10, offset = 1,       tags$h3(\"Filter data with select group module\"),       shinyWidgets::panel(         select_group_ui(           id = \"my-filters\",           params = list(             list(inputId = \"Manufacturer\", label = \"Manufacturer:\"),             list(inputId = \"Type\", label = \"Type:\"),             list(inputId = \"AirBags\", label = \"AirBags:\"),             list(inputId = \"DriveTrain\", label = \"DriveTrain:\")           ), vs_args = list(disableSelectAll = FALSE)         ),         status = \"primary\"       ),       reactable::reactableOutput(outputId = \"table\"),       tags$b(\"Inputs values:\"),       verbatimTextOutput(\"inputs\")     )   ) )  server <- function(input, output, session) {   res_mod <- select_group_server(     id = \"my-filters\",     data = reactive(MASS::Cars93),     vars = reactive(c(\"Manufacturer\", \"Type\", \"AirBags\", \"DriveTrain\"))   )    output$table <- reactable::renderReactable({     reactable::reactable(res_mod())   })    output$inputs <- renderPrint({     attr(res_mod(), \"inputs\")   }) }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/datamods/reference/show_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Display a table in a window — show_data","title":"Display a table in a window — show_data","text":"Display table window","code":""},{"path":"https://dreamrs.github.io/datamods/reference/show_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display a table in a window — show_data","text":"","code":"show_data(   data,   title = NULL,   options = NULL,   show_classes = TRUE,   type = c(\"popup\", \"modal\", \"winbox\"),   width = \"65%\",   ... )"},{"path":"https://dreamrs.github.io/datamods/reference/show_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display a table in a window — show_data","text":"data data object (either matrix data.frame). title Title displayed window. options Arguments passed toastui::datagrid(). show_classes Show variables classes variables names table header. type Display table pop-shinyWidgets::show_alert(), modal window shiny::showModal() WinBox window shinyWidgets::WinBox(). width Width window, used type = \"popup\" type = \"winbox\". ... Additional options, wbOptions = wbOptions() wbControls = wbControls().","code":""},{"path":"https://dreamrs.github.io/datamods/reference/show_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display a table in a window — show_data","text":"value.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/show_data.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Display a table in a window — show_data","text":"use type = \"winbox\", need use shinyWidgets::html_dependency_winbox() somewhere UI.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/show_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display a table in a window — show_data","text":"","code":"library(shiny) library(datamods)  ui <- fluidPage(   theme = bslib::bs_theme(version = 5L),   shinyWidgets::html_dependency_winbox(),   actionButton(     inputId = \"show1\",     label = \"Show data in popup\",     icon = icon(\"eye\")   ),   actionButton(     inputId = \"show2\",     label = \"Show data in modal\",     icon = icon(\"eye\")   ),   actionButton(     inputId = \"show3\",     label = \"Show data without classes\",     icon = icon(\"eye\")   ),   actionButton(     inputId = \"show4\",     label = \"Show data in Winbox\",     icon = icon(\"eye\")   ) )  server <- function(input, output, session) {   observeEvent(input$show1, {     show_data(MASS::Cars93, title = \"MASS::Cars93 dataset\", type = \"popup\")   })   observeEvent(input$show2, {     show_data(MASS::Cars93, title = \"MASS::Cars93 dataset\", type = \"modal\")   })   observeEvent(input$show3, {     show_data(       data = MASS::Cars93,       title = \"MASS::Cars93 dataset\",       show_classes = FALSE,       options = list(pagination = 10),       type = \"modal\"     )   })   observeEvent(input$show4, {     show_data(       MASS::Cars93,       title = \"MASS::Cars93 dataset\",       type = \"winbox\",       wbOptions = shinyWidgets::wbOptions(background = \"forestgreen\")     )   }) }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/datamods/reference/update-factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Module to Reorder the Levels of a Factor Variable — update-factor","title":"Module to Reorder the Levels of a Factor Variable — update-factor","text":"module contain interface reorder levels factor variable.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/update-factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Module to Reorder the Levels of a Factor Variable — update-factor","text":"","code":"update_factor_ui(id)  update_factor_server(id, data_r = reactive(NULL))  modal_update_factor(   id,   title = i18n(\"Update levels of a factor\"),   easyClose = TRUE,   size = \"l\",   footer = NULL )"},{"path":"https://dreamrs.github.io/datamods/reference/update-factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Module to Reorder the Levels of a Factor Variable — update-factor","text":"id Module ID. data_r shiny::reactive() function returning data.frame. title optional title dialog. easyClose TRUE, modal dialog can dismissed clicking outside dialog box, pressing Escape key. FALSE (default), modal dialog dismissed ways; instead must dismissed clicking modalButton(), call removeModal() server. size One \"s\" small, \"m\" (default) medium, \"l\" large, \"xl\" extra large. Note \"xl\" works Bootstrap 4 (opt-Bootstrap 4+, pass bslib::bs_theme() theme argument page container like fluidPage()). footer UI footer. Use NULL footer.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/update-factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Module to Reorder the Levels of a Factor Variable — update-factor","text":"shiny::reactive() function returning data.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/update-factor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Module to Reorder the Levels of a Factor Variable — update-factor","text":"","code":"library(shiny) library(datamods) library(ggplot2)  ui <- fluidPage(   theme = bslib::bs_theme(version = 5L, preset = \"bootstrap\"),   shinyWidgets::html_dependency_winbox(),   tags$h2(\"Reorder the Levels of a Factor\"),   fluidRow(     column(       width = 6,       update_factor_ui(\"id\"),       actionButton(\"modal\", \"Or click here to open a modal to update factor's level\"),       tags$br(), tags$br(),       actionButton(\"winbox\", \"Or click here to open a WinBox to create a column\")     ),     column(       width = 6,       selectInput(         \"var\",         label = \"Variable to plot:\",         choices = NULL       ),       plotOutput(\"plot\"),       verbatimTextOutput(\"res\")     )   ) ) #> Warning: i18n: translation for 'Create a new variable (otherwise replaces the one selected)' not found!  server <- function(input, output, session) {    rv <- reactiveValues(data = MASS::Cars93[c(1, 2, 3, 9, 10, 11, 16, 26, 27)])   observe(     updateSelectInput(inputId = \"var\", choices = names(rv$data))   )    # Inline mode   data_inline_r <- update_factor_server(     id = \"id\",     data_r = reactive(rv$data)   )   observeEvent(data_inline_r(), rv$data <- data_inline_r())    # modal window mode   observeEvent(input$modal, modal_update_factor(\"modal\"))   data_modal_r <- update_factor_server(     id = \"modal\",     data_r = reactive(rv$data)   )   observeEvent(data_modal_r(), {     shiny::removeModal()     rv$data <- data_modal_r()   })    # winbox mode   observeEvent(input$winbox, winbox_update_factor(\"winbox\"))   data_winbox_r <- update_factor_server(     id = \"winbox\",     data_r = reactive(rv$data)   )   observeEvent(data_winbox_r(), rv$data <- data_winbox_r())    # Plot results   output$plot <- renderPlot({     req(input$var, rv$data)     ggplot(rv$data) +       aes(x = !!sym(input$var)) +       geom_bar()   })   # Show results   output$res <- renderPrint({     data <- req(rv$data)     str(data)   }) }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/datamods/reference/update-variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Select, rename and convert variables — update-variables","title":"Select, rename and convert variables — update-variables","text":"Select, rename convert variables","code":""},{"path":"https://dreamrs.github.io/datamods/reference/update-variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select, rename and convert variables — update-variables","text":"","code":"update_variables_ui(id, title = TRUE)  update_variables_server(   id,   data,   height = NULL,   return_data_on_init = FALSE,   try_silent = FALSE )"},{"path":"https://dreamrs.github.io/datamods/reference/update-variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select, rename and convert variables — update-variables","text":"id Module's ID title Module's title, TRUE use default title, use NULL title shiny.tag custom one. data data.frame reactive function returning data.frame. height Height table. return_data_on_init Return initial data module called. try_silent logical: report error messages suppressed?","code":""},{"path":"https://dreamrs.github.io/datamods/reference/update-variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select, rename and convert variables — update-variables","text":"shiny::reactive() function returning updated data.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/update-variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select, rename and convert variables — update-variables","text":"","code":"library(shiny) library(datamods)  testdata <- data.frame(   date_as_char = as.character(Sys.Date() + 0:9),   date_as_num = as.numeric(Sys.Date() + 0:9),   datetime_as_char = as.character(Sys.time() + 0:9 * 3600*24),   datetime_as_num = as.numeric(Sys.time() + 0:9 * 3600*24),   num_as_char = as.character(1:10),   char = month.name[1:10],   char_na = c(\"A\", \"A\", \"B\", NA, \"B\", \"A\", NA, \"B\", \"A\", \"B\"),   stringsAsFactors = FALSE )  ui <- fluidPage(   theme = bslib::bs_theme(version = 5L, preset = \"bootstrap\"),   tags$h3(\"Select, rename and convert variables\"),   fluidRow(     column(       width = 6,       # radioButtons()       update_variables_ui(\"vars\")     ),     column(       width = 6,       tags$b(\"original data:\"),       verbatimTextOutput(\"original\"),       verbatimTextOutput(\"original_str\"),       tags$b(\"Modified data:\"),       verbatimTextOutput(\"modified\"),       verbatimTextOutput(\"modified_str\")     )   ) ) #> Warning: i18n: translation for 'Select, rename and convert variables in table above, then apply changes by clicking button below.' not found!  server <- function(input, output, session) {    updated_data <- update_variables_server(     id = \"vars\",     data = reactive(testdata),     return_data_on_init = FALSE   )    output$original <- renderPrint({     testdata   })   output$original_str <- renderPrint({     str(testdata)   })    output$modified <- renderPrint({     updated_data()   })   output$modified_str <- renderPrint({     str(updated_data())   }) }  if (interactive())   shinyApp(ui, server)"},{"path":"https://dreamrs.github.io/datamods/reference/validation.html","id":null,"dir":"Reference","previous_headings":"","what":"Validation module — validation_ui","title":"Validation module — validation_ui","text":"Check dataset respect validation expectations.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/validation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validation module — validation_ui","text":"","code":"validation_ui(id, display = c(\"dropdown\", \"inline\"), max_height = NULL, ...)  validation_server(   id,   data,   n_row = NULL,   n_col = NULL,   n_row_label = i18n(\"Valid number of rows\"),   n_col_label = i18n(\"Valid number of columns\"),   btn_label = i18n(\"Dataset validation:\"),   rules = NULL,   bs_version = 3 )"},{"path":"https://dreamrs.github.io/datamods/reference/validation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validation module — validation_ui","text":"id Module's ID. display Display validation results dropdown menu clicking button display results directly interface. max_height Maximum height validation results element, useful many rules. ... Arguments passed actionButton uiOutput depending display mode, use inputId/outputId, label icon (button ). data reactive function returning data.frame. n_row, n_col one-sided formula check number rows columns respectively, see examples. n_row_label, n_col_label Text displayed result check number rows/columns. btn_label Label dropdown button, followed validation result. rules object class validator created validate::validator. bs_version Bootstrap version used, may affect rendering, especially status badges.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/validation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validation module — validation_ui","text":"UI: HTML tags can included shiny's UI Server: list two slots: status: reactive function returning best status available \"OK\", \"Failed\" \"Error\". details: reactive function returning list validation details.","code":""},{"path":"https://dreamrs.github.io/datamods/reference/validation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validation module — validation_ui","text":"","code":"library(datamods) library(shiny)  if (requireNamespace(\"validate\")) {   library(validate)    # Define some rules to be applied to data   myrules <- validator(     is.character(Manufacturer) | is.factor(Manufacturer),     is.numeric(Price),     Price > 12, # we should use 0 for testing positivity, but that's for the example     !is.na(Luggage.room),     in_range(Cylinders, min = 4, max = 8),     Man.trans.avail %in% c(\"Yes\", \"No\")   )   # Add some labels   label(myrules) <- c(     \"Variable Manufacturer must be character\",     \"Variable Price must be numeric\",     \"Variable Price must be strictly positive\",     \"Luggage.room must not contain any missing values\",     \"Cylinders must be between 4 and 8\",     \"Man.trans.avail must be 'Yes' or 'No'\"   )   # you can also add a description()    ui <- fluidPage(     tags$h2(\"Validation\"),     fluidRow(       column(         width = 4,         radioButtons(           inputId = \"dataset\",           label = \"Choose dataset:\",           choices = c(\"mtcars\", \"MASS::Cars93\")         ),         tags$p(\"Dropdown example:\"),         validation_ui(\"validation1\"),          tags$br(),          tags$p(\"Inline example:\"),         validation_ui(\"validation2\", display = \"inline\")       ),       column(         width = 8,         tags$b(\"Status:\"),         verbatimTextOutput(\"status\"),         tags$b(\"Details:\"),         verbatimTextOutput(\"details\")       )     )   )    server <- function(input, output, session) {      dataset <- reactive({       if (input$dataset == \"mtcars\") {         mtcars       } else {         MASS::Cars93       }     })      results <- validation_server(       id = \"validation1\",       data = dataset,       n_row = ~ . > 20, # more than 20 rows       n_col = ~ . >= 3, # at least 3 columns       rules = myrules     )      validation_server(       id = \"validation2\",       data = dataset,       n_row = ~ . > 20, # more than 20 rows       n_col = ~ . >= 3, # at least 3 columns       rules = myrules     )      output$status <- renderPrint(results$status())     output$details <- renderPrint(results$details())    }    if (interactive())     shinyApp(ui, server) } #> Loading required namespace: validate #>  #> Attaching package: ‘validate’ #> The following object is masked from ‘package:ggplot2’: #>  #>     expr"},{"path":"https://dreamrs.github.io/datamods/news/index.html","id":"datamods-153","dir":"Changelog","previous_headings":"","what":"datamods 1.5.3","title":"datamods 1.5.3","text":"CRAN release: 2024-10-02 update_variables_server: change data update management clicking validate button, fixed problem input data output data.","code":""},{"path":"https://dreamrs.github.io/datamods/news/index.html","id":"datamods-152","dir":"Changelog","previous_headings":"","what":"datamods 1.5.2","title":"datamods 1.5.2","text":"CRAN release: 2024-09-05 import_file_ui: back old parameters layout inside dropdown button new argument switch inline layout. edit_data_server: allow use reactive function reactable_options. cut variable module (cut_variable_ui/cut_variable_server): allow select fixed breaks.","code":""},{"path":"https://dreamrs.github.io/datamods/news/index.html","id":"datamods-151","dir":"Changelog","previous_headings":"","what":"datamods 1.5.1","title":"datamods 1.5.1","text":"CRAN release: 2024-05-16 New module update_factor_ui() / update_factor_server() reorder levels factor. i18n: Updated translations files new labels, automatically translated, see incorrect translations, please open issue PR : https://github.com/dreamRs/datamods","code":""},{"path":"https://dreamrs.github.io/datamods/news/index.html","id":"datamods-150","dir":"Changelog","previous_headings":"","what":"datamods 1.5.0","title":"datamods 1.5.0","text":"CRAN release: 2024-04-04 New module create_column_ui() / create_column_server() add new column based expression data.frame. New module cut_variable_ui() / cut_variable_server() cut numeric factor several interval.","code":""},{"path":"https://dreamrs.github.io/datamods/news/index.html","id":"datamods-145","dir":"Changelog","previous_headings":"","what":"datamods 1.4.5","title":"datamods 1.4.5","text":"CRAN release: 2024-02-28 edit_data_server() : fixed default variable labels var_labels = NULL.","code":""},{"path":"https://dreamrs.github.io/datamods/news/index.html","id":"datamods-144","dir":"Changelog","previous_headings":"","what":"datamods 1.4.4","title":"datamods 1.4.4","text":"CRAN release: 2024-02-08 edit_data_server() : added argument add_default_values = list(...) specify default value input widget adding new entry table.","code":""},{"path":"https://dreamrs.github.io/datamods/news/index.html","id":"datamods-143","dir":"Changelog","previous_headings":"","what":"datamods 1.4.3","title":"datamods 1.4.3","text":"CRAN release: 2024-01-10 edit_data_server() : added ability specify callbacks functions executed performing action table (add, update delete). edit_data_server() : pass reactable option + selection table #82 edit-data module : use factor levels sort theme edit input form factors (sorting also applies characters), thanks @Felixmil. import-file module : allow specify string used identify NA, thanks @DrFabach. filter_data_server() : argument drop_ids can now set via option datamods.filter.drop_ids can list like list(p = 0.9, n = 50) specify threshold values remove IDs columns.","code":""},{"path":"https://dreamrs.github.io/datamods/news/index.html","id":"datamods-142","dir":"Changelog","previous_headings":"","what":"datamods 1.4.2","title":"datamods 1.4.2","text":"CRAN release: 2023-09-26 i18n: japanese translations added, thanks @nissinbo. select_group_server() : output value now inputs attribute named list selected inputs values.","code":""},{"path":"https://dreamrs.github.io/datamods/news/index.html","id":"datamods-141","dir":"Changelog","previous_headings":"","what":"datamods 1.4.1","title":"datamods 1.4.1","text":"CRAN release: 2023-06-19 i18n: polish translations added, thanks @jakub-jedrusiak.","code":""},{"path":"https://dreamrs.github.io/datamods/news/index.html","id":"bug-fixes-1-4-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"datamods 1.4.1","text":"Fixed displaying variable class View tab (fix #64). select_group_server() : fix update inputs multiple = FALSE. filter_data_server() : sorting choices select menus (select, picker virtual) (fix #66)). filter_data_server() : don’t use <\/> empty field confuse HTML tag (fix #65)).","code":""},{"path":"https://dreamrs.github.io/datamods/news/index.html","id":"datamods-140","dir":"Changelog","previous_headings":"","what":"datamods 1.4.0","title":"datamods 1.4.0","text":"CRAN release: 2022-11-24 New module : edit_data_ui() / edit_data_server() interactively edit data.frame, thanks @ggsamra. New module : sample_ui() / sample_server() take sample table, thanks @ggsamra.","code":""},{"path":"https://dreamrs.github.io/datamods/news/index.html","id":"datamods-134","dir":"Changelog","previous_headings":"","what":"datamods 1.3.4","title":"datamods 1.3.4","text":"CRAN release: 2022-09-01 i18n: korean translations added, thanks @ChangwooLim (migrated esquisse package). import_ui() / import_modal(): added file_extensions argument passed import_file_ui() (fix #51).","code":""},{"path":"https://dreamrs.github.io/datamods/news/index.html","id":"datamods-133","dir":"Changelog","previous_headings":"","what":"datamods 1.3.3","title":"datamods 1.3.3","text":"CRAN release: 2022-07-13 i18n: turkish translations added, thanks @sbalci. filter_data module now support getting setting filter values, thanks @bellma-lilly.","code":""},{"path":"https://dreamrs.github.io/datamods/news/index.html","id":"datamods-132","dir":"Changelog","previous_headings":"","what":"datamods 1.3.2","title":"datamods 1.3.2","text":"CRAN release: 2022-05-06 Fix bad link NEWS.","code":""},{"path":"https://dreamrs.github.io/datamods/news/index.html","id":"datamods-131","dir":"Changelog","previous_headings":"","what":"datamods 1.3.1","title":"datamods 1.3.1","text":"Fixed bug update_variables module.","code":""},{"path":"https://dreamrs.github.io/datamods/news/index.html","id":"datamods-130","dir":"Changelog","previous_headings":"","what":"datamods 1.3.0","title":"datamods 1.3.0","text":"CRAN release: 2022-04-25 New module read flat data URLs import_url_*(). Error messages displayed user informative actual error. filter_data_server(): new argument value_na set default value NA’s filters widgets. import_copypaste_ui(): new argument name_field show name field. import_copypaste_server(): new argument fread_args pass arguments data.table::fread. i18n: chinese translations added, thanks @xmusphlkg. i18n: spanish translations added, thanks @dnldelarosa. i18n: german translations added, thanks @SteEcker joerghenkebuero.","code":""},{"path":"https://dreamrs.github.io/datamods/news/index.html","id":"datamods-120","dir":"Changelog","previous_headings":"","what":"datamods 1.2.0","title":"datamods 1.2.0","text":"CRAN release: 2021-11-23 Switch {phosphoricons} icons. import_file_ui() new argument file_extensions select files user can import. import_file_server() new argument read_fns define custom function(s) read data.","code":""},{"path":"https://dreamrs.github.io/datamods/news/index.html","id":"translations-1-2-0","dir":"Changelog","previous_headings":"","what":"Translations","title":"datamods 1.2.0","text":"i18n: 🇲🇰 macedonian translations added, thanks @novica. i18n: 🇦🇱 albanian translations added, thanks @novica. i18n: 🇵🇹 🇧🇷 brazilian portuguese translations added, thanks @gabrielteotonio.","code":""},{"path":"https://dreamrs.github.io/datamods/news/index.html","id":"datamods-115","dir":"Changelog","previous_headings":"","what":"datamods 1.1.5","title":"datamods 1.1.5","text":"CRAN release: 2021-07-02 import_*_server() added reset argument clear data. import_copypaste_server() also return reactive function “name” like others. New function i18n() add internationalization shiny apps.","code":""},{"path":"https://dreamrs.github.io/datamods/news/index.html","id":"datamods-114","dir":"Changelog","previous_headings":"","what":"datamods 1.1.4","title":"datamods 1.1.4","text":"CRAN release: 2021-04-20 filter_data_server: convert data data.frame (fix esquisse #149). filter_data_server: fixed bug timezone POSIXct. Import data package: use pkg::data notation data’s name.","code":""},{"path":"https://dreamrs.github.io/datamods/news/index.html","id":"datamods-113","dir":"Changelog","previous_headings":"","what":"datamods 1.1.3","title":"datamods 1.1.3","text":"CRAN release: 2021-04-13 Preserve class sf output.","code":""},{"path":"https://dreamrs.github.io/datamods/news/index.html","id":"datamods-112","dir":"Changelog","previous_headings":"","what":"datamods 1.1.2","title":"datamods 1.1.2","text":"CRAN release: 2021-03-27 Fixed bug retrieving data package parenthesis name. Fixed test R-oldrel","code":""},{"path":"https://dreamrs.github.io/datamods/news/index.html","id":"datamods-110","dir":"Changelog","previous_headings":"","what":"datamods 1.1.0","title":"datamods 1.1.0","text":"CRAN release: 2021-02-23 Added internationalization translate labels used modules, see corresponding vignette.","code":""},{"path":"https://dreamrs.github.io/datamods/news/index.html","id":"datamods-101","dir":"Changelog","previous_headings":"","what":"datamods 1.0.1","title":"datamods 1.0.1","text":"CRAN release: 2021-02-16 First release CRAN: Shiny modules import, update, validate filter data interactive applications Added NEWS.md file track changes package.","code":""}]
